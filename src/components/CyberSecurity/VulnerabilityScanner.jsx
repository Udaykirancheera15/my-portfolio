import React, { useState } from 'react';
import { motion } from 'framer-motion';

const VulnerabilityScanner = () => {
  const [url, setUrl] = useState('');
  const [isScanningStatus, setIsScanningStatus] = useState(false);
  const [scanCompleted, setScanCompleted] = useState(false);
  const [scanResults, setScanResults] = useState(null);
  const [scanProgress, setScanProgress] = useState(0);

  const handleUrlChange = (e) => {
    setUrl(e.target.value);
  };

  const startScan = async (e) => {
    e.preventDefault();
    
    if (!url) return;
    
    // Reset previous scan
    setScanCompleted(false);
    setScanResults(null);
    setScanProgress(0);
    setIsScanningStatus(true);
    
    // Simulate scanning progress
    const progressInterval = setInterval(() => {
      setScanProgress(prev => {
        if (prev >= 100) {
          clearInterval(progressInterval);
          return 100;
        }
        return prev + 5;
      });
    }, 200);
    
    // Simulate scan process with random delays
    setTimeout(() => {
      clearInterval(progressInterval);
      setScanProgress(100);
      
      // Generate simulated results
      const simulatedResults = simulateScanResults(url);
      setScanResults(simulatedResults);
      setScanCompleted(true);
      setIsScanningStatus(false);
    }, 5000);
  };

  const simulateScanResults = (url) => {
    // Generate random vulnerabilities based on common web security issues
    const possibleVulnerabilities = [
      {
        id: 'xss',
        name: 'Cross-Site Scripting (XSS)',
        severity: 'High',
        description: 'Found potential XSS vulnerability in input forms. This could allow attackers to inject malicious scripts.',
        recommendation: 'Implement proper input validation and output encoding.'
      },
      {
        id: 'sqli',
        name: 'SQL Injection',
        severity: 'Critical',
        description: 'Potential SQL injection detected in query parameters. This could allow unauthorized database access.',
        recommendation: 'Use parameterized queries or prepared statements.'
      },
      {
        id: 'csrf',
        name: 'Cross-Site Request Forgery',
        severity: 'Medium',
        description: 'Missing CSRF tokens in forms. This could allow attackers to perform unauthorized actions on behalf of users.',
        recommendation: 'Implement anti-CSRF tokens for all state-changing operations.'
      },
      {
        id: 'ssl',
        name: 'Insecure SSL/TLS',
        severity: 'Medium',
        description: 'Outdated SSL/TLS configuration detected. This could expose sensitive data in transit.',
        recommendation: 'Update to TLS 1.3 and disable outdated protocols and ciphers.'
      },
      {
        id: 'headers',
        name: 'Missing Security Headers',
        severity: 'Low',
        description: 'Important security headers are missing (X-XSS-Protection, Content-Security-Policy).',
        recommendation: 'Implement recommended security headers to enhance browser security.'
      },
      {
        id: 'cookies',
        name: 'Insecure Cookie Configuration',
        severity: 'Low',
        description: 'Cookies missing Secure and HttpOnly flags. This could expose cookies to theft or manipulation.',
        recommendation: 'Set Secure and HttpOnly flags on sensitive cookies.'
      }
    ];
    
    // Randomly select 2-4 vulnerabilities
    const vulnerabilityCount = Math.floor(Math.random() * 3) + 2;
    const shuffled = [...possibleVulnerabilities].sort(() => 0.5 - Math.random());
    const selectedVulnerabilities = shuffled.slice(0, vulnerabilityCount);
    
    // Generate random security score
    const securityScore = Math.floor(Math.random() * 41) + 60; // Score between 60-100
    
    return {
      url,
      timestamp: new Date().toISOString(),
      securityScore,
      vulnerabilities: selectedVulnerabilities,
      scanDuration: (Math.random() * 2 + 3).toFixed(1) // Random scan time between 3-5 seconds
    };
  };

  const getSeverityColor = (severity) => {
    switch (severity.toLowerCase()) {
      case 'critical':
        return '#e53e3e';
      case 'high':
        return '#dd6b20';
      case 'medium':
        return '#d69e2e';
      case 'low':
        return '#3182ce';
      default:
        return '#718096';
    }
  };

  const getScoreColor = (score) => {
    if (score >= 90) return '#48bb78';
    if (score >= 80) return '#68d391';
    if (score >= 70) return '#f6e05e';
    if (score >= 60) return '#f6ad55';
    return '#fc8181';
  };

  return (
    <div className="vulnerability-scanner">
      <form onSubmit={startScan} className="scanner-form">
        <div className="form-group">
          <input
            type="text"
            placeholder="Enter website URL (e.g., example.com)"
            value={url}
            onChange={handleUrlChange}
            disabled={isScanningStatus}
            className="url-input"
          />
          <button 
            type="submit" 
            className="scan-btn"
            disabled={isScanningStatus || !url}
          >
            {isScanningStatus ? 'Scanning...' : 'Scan Website'}
          </button>
        </div>
        
        {isScanningStatus && (
          <div className="scan-progress-container">
            <div className="scan-progress-bar">
              <div 
                className="scan-progress-fill"
                style={{ width: `${scanProgress}%` }}
              ></div>
            </div>
            <div className="scan-progress-text">{scanProgress}% Complete</div>
          </div>
        )}
      </form>

      {scanCompleted && scanResults && (
        <motion.div 
          className="scan-results"
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
        >
          <div className="results-header">
            <div className="results-url">
              <h4>Scan Results for: {scanResults.url}</h4>
              <span className="scan-timestamp">Scan completed in {scanResults.scanDuration}s</span>
            </div>
            
            <div 
              className="security-score"
              style={{ 
                backgroundColor: `${getScoreColor(scanResults.securityScore)}22`,
                color: getScoreColor(scanResults.securityScore)
              }}
            >
              <span className="score-value">{scanResults.securityScore}</span>
              <span className="score-label">Security Score</span>
            </div>
          </div>
          
          <div className="vulnerabilities-list">
            <h4>Detected Vulnerabilities ({scanResults.vulnerabilities.length})</h4>
            
            {scanResults.vulnerabilities.length > 0 ? (
              scanResults.vulnerabilities.map((vuln, index) => (
                <motion.div 
                  key={vuln.id}
                  className="vulnerability-item"
                  initial={{ opacity: 0, x: -20 }}
                  animate={{ opacity: 1, x: 0 }}
                  transition={{ delay: index * 0.1 }}
                >
                  <div className="vuln-header">
                    <h5 className="vuln-name">{vuln.name}</h5>
                    <span 
                      className="vuln-severity"
                      style={{ backgroundColor: getSeverityColor(vuln.severity) }}
                    >
                      {vuln.severity}
                    </span>
                  </div>
                  <p className="vuln-description">{vuln.description}</p>
                  <div className="vuln-recommendation">
                    <strong>Recommendation:</strong> {vuln.recommendation}
                  </div>
                </motion.div>
              ))
            ) : (
              <div className="no-vulnerabilities">
                <p>No vulnerabilities detected! Great job.</p>
              </div>
            )}
          </div>
          
          <div className="scan-disclaimer">
            <p><strong>Note:</strong> This is a simulated scan for demonstration purposes only. In a real application, this would connect to actual vulnerability scanning tools and provide accurate results.</p>
          </div>
        </motion.div>
      )}
    </div>
  );
};

export default VulnerabilityScanner;
